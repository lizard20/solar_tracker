/*
** FSM - Finite State Machine for 
** Solar Tracker Control 
**
** */

#include "control.h"
#include "prototypes.h"

// START  STATE
int
start_state ( ctrl_t* ptr )
{
	printf ("start\n");

// connect to ads1115 as i2c slave
//	if (open_ads ( ptr -> fd ) < 0 )
//	{
//		printf("Error: Couldn't find ads1115 device on address!\n");
//		exit (1);
//	}
	// open i2c 
//	ptr -> fd = open_i2c_rtc ();
//	if ( ptr -> fd < 0) 
//	{
//		printf("Error: Couldn't open device! %d\n", ptr -> fd);
//		exit (1);
//	}

	// connect to ads1115 as i2c slave
//	if (open_ads ( ptr -> fd ) < 0 )
//	{
//		printf("Error: Couldn't find ads1115 device on address!\n");
//		exit (1);
//	}
//	config_ads ( &data );

	// connecto to ds3231 (RTC) as i2c slave
//	if (connect_rtc ( ptr -> fd ) < 0 )
//	{
//		printf("Error: Couldn't find ds3231 (RTC) device on address!\n");
//		exit (1);
//	}

	ptr -> event = START_END;

	return 0;
} // end of start state

// HOME STATE
int
home_state ( ctrl_t* ptr )
{
	printf ("home\n");
	ptr -> event = HOME_END;
	return 0;
}

// AUTO STATE
int 
auto_state ( ctrl_t* ptr )
{
	get_elev_angle( ptr );
//	read_ldr ( ptr );

//	if (read_rtc (ptr -> fd, buf))
//	{
//		printf("Failed to read ds3231 (RTC) device on address!\n");
//		exit (1);
//	}
//	print_rtc (buf);
	// print ADC
//	print_ads (ptr -> fd, &data );

  	ptr -> event = AUTO_END;
	return 0;
}

// MANUAL STATE
int
manual_state ( ctrl_t* ptr )
{
	printf ("manual\n");
	ptr -> event = MANUAL_END;
	return 0;
}

// IDLE STATE
int 
idle_state  ( ctrl_t* ptr )
{
	printf ("idle\n");
	ptr -> event = IDLE_END;
	return 0;
}

void
print_spa (spa_data* spa, int result )
{
	float min, sec;
	char* months[13] = {"NULL", "Jan", "Feb", "Mar","Apr","May","Jun", "Jul", "Aug", "Sep", "Oct","Nov", "Dec"};


	if (result == 0)
	{
		printf ("********** El Alto neighborhood data ***************\n");	
		printf ("Date:          %02d-%s-%d\n", spa -> day, months[spa -> month], spa -> year );
		printf ("Current Time:  %dh %dm %ds\n", spa-> hour, spa -> minute, (int)spa->second);
	    min = 60.0*(spa->sunrise - (int)(spa->sunrise));
        sec = 60.0*(min - (int)min);
        printf("Sunrise:       %02d:%02d:%02d Local Time\n", (int)(spa->sunrise), (int)min, (int)sec);
        min = 60.0*(spa->sunset - (int)(spa->sunset));
        sec = 60.0*(min - (int)min);
        printf("Sunset:        %02d:%02d:%02d Local Time\n", (int)(spa->sunset), (int)min, (int)sec);

		printf ("Elevation avg: %.6f\n", spa->elevation);
		printf ("Latitud:       %.6f\n", spa->latitude );
		printf ("Longitud:      %.6f\n", spa->longitude );
		printf ("Elevation:     %.6f degrees \n", 90.0 - spa->zenith );
		printf("Azimuth:       %.6f degrees\n",spa->azimuth);
		printf ("*************************************************\n");	
	} 
	else
	{
		printf("SPA Error Code: %d\n", result);
	}
}

int
get_elev_angle (ctrl_t* ptr )
{
	int result;	
	spa_data spa;
	rtc_t rtc;
	rtc_t* ptr_rtc = &rtc;

	if (open_i2c_rtc ( ptr_rtc) > 0 )
	{
		printf("Failed opening ds3231 (RTC) device!\n");
		return 1;
	}
	
	if (read_rtc (ptr_rtc  ) > 0 )
	{
		printf("Failed to read ds3231 (RTC) device on address!\n");
		return 1;
	}

//	printf ("auto\n");

	// close rtc driver
	close (ptr_rtc -> fd);
	#ifndef RTC 
	ptr -> t = time(NULL);
	ptr -> tm = *(localtime(&(ptr -> t)));

    spa.year		= (ptr -> tm).tm_year + YEAR_OFFSET;
    spa.month		= (ptr -> tm).tm_mon + MONTH_OFFSET;
    spa.day			= (ptr -> tm).tm_mday;
    spa.hour		= (ptr -> tm).tm_hour;
    spa.minute		= (ptr -> tm).tm_min;
    spa.second		= (ptr -> tm).tm_sec;
	#endif

	#ifdef RTC
	spa.year		= BCD2DEC(ptr -> buf[6]) + 2000;
    spa.month      	= BCD2DEC(ptr -> buf[5]);
    spa.day        	= BCD2DEC(ptr -> buf[4]);
    spa.hour        = BCD2DEC(ptr -> buf[2]);
    spa.minute      = BCD2DEC(ptr -> buf[1]);
    spa.second      = BCD2DEC(ptr -> buf[0]);
	#endif

    spa.timezone      = TIMEZONE;
    spa.delta_ut1     = 0;
    spa.delta_t       = 67;
    spa.longitude     = LONGITUD;
    spa.latitude      = LATITUD;
    spa.elevation     = ELEVATION;
    spa.pressure      = PRESSURE;
    spa.temperature   = 11;
    spa.slope         = 30;
    spa.azm_rotation  = -10;
    spa.atmos_refract = 0.5667;
    spa.function      = SPA_ALL;

	result = spa_calculate (&spa);
	print_spa (&spa, result );
	ptr -> elev_angle = 90.0 - spa.zenith;
	printf ("elevation angle: %f\n", ptr -> elev_angle);

	return 0;
}

//int
//open_rtc ( ctrl_t* ptr )
//{
//	int ret = open_i2c_rtc  (ptr -> ptr_rtc -> fd);
//	if ( ptr -> ptr_rtc ->  fd < 0) 
//	{
//		printf("Error: Couldn't open device! %d\n", ptr -> fd);
//		return 1;
//	}
	
//	if (connect_rtc ( ptr -> fd ) < 0 )
//	{
//		printf("Error: Couldn't find ds3231 (RTC) device on address!\n");
//		return 1;
//	}
//	return 0;
//}

int
read_ldr ( ctrl_t* ptr  )
{
	//if ( open_i2c_ads ( ptr -> fd))
	//{
	//	printf("Error: Couldn't open device! %d\n", ptr -> fd);
	//	return 1;
	//}
	
//	if (connect_ads ( ptr) < 0 )
//	{
//		printf("Error: Couldn't find ads1115 (ADC) device on address!\n");
//		return 1;
//	}
//	
//	config_ads ( ptr );
//	
//	// Read analog inputs
//	ptr -> ain = AIN0;
//	ptr -> tl = read_ads (ptr -> fd ); // input 0 top-left
//	ptr -> ain = AIN1;
//	ptr -> tr = read_ads (ptr -> fd ); // input 1 top-right
//	ptr -> ain = AIN2;
//	ptr -> bl = read_ads (ptr -> fd ); // input 2 bottom-left
//	ptr -> ain = AIN3;
//	ptr -> br = read_ads (ptr -> fd ); // input 3 bottom-right
//	printf ("tl: %d tr: %d bl: %d br: %d\n", ptr->tl, ptr -> tr, ptr ->bl, ptr -> br );
//
	close(ptr -> fd );
	return 0;
}
